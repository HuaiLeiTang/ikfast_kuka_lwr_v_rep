    JointHandle={-1,-1,-1,-1,-1,-1,-1}
    JointHandle[1]=simGetObjectHandle("LBR4p_joint1")
    JointHandle[2]=simGetObjectHandle("LBR4p_joint2")
    JointHandle[3]=simGetObjectHandle("LBR4p_joint3")
    JointHandle[4]=simGetObjectHandle("LBR4p_joint4")
    JointHandle[5]=simGetObjectHandle("LBR4p_joint5")
    JointHandle[6]=simGetObjectHandle("LBR4p_joint6")
    JointHandle[7]=simGetObjectHandle("LBR4p_joint7")
    Base=simGetObjectHandle("Base")
    Target=simGetObjectHandle("Target")
    local M={}
    M=simGetObjectMatrix(Target,Base)
    path="Pose_Target.txt"

    --local Orient={}
    --Orient=simGetQuaternionFromMatrix(M)
    --print(M(4), M(8), M(12))
    --print(Orient[1],Orient[2],Orient[3], Orient[4])
    file=io.open(path,"w")
    for j=1,3 do
        --[[if j==4 then
            file:write(0.0," ")
        else]]--
            file:write(M[j*4]," ")
        --end
    end

    file:write("\n")

    for i=1,3 do
        for j=1,3 do
            file:write(M[(i-1)*4+j]," ")
        end
        file:write("\n")
    end

    

    --[[for i=1,4 do
        file:write(Orient[i]," ")
    end]]--

    file:close()

    --[[local Orient={}
    Orient=simGetEulerAnglesFromMatrix(M)
    print(Orient[1],Orient[2],Orient[3])
    path="IKFast.txt"
    path2="IKFast2.txt"
    file=io.open(path2,"w")
    for i=1,3 do
        for j=1,3 do
            file:write(M[(i-1)*4+j]," ")
        end
        file:write("\n")
    end
    for i=1,3 do
        file:write(M[4*i]," ")
    end
    file:write("\n")
    file:close()]]--

    simExtIWRIKFast(path)
    file=io.open(path,"r")
    for i=1,7 do
        if i==4 then
            simSetJointTargetPosition(JointHandle[i],-file:read("*number"))
        else
            simSetJointTargetPosition(JointHandle[i],file:read("*number"))
        end
    end
    file:close()
